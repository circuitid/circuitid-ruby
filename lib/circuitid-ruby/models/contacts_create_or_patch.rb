=begin
#Circuit ID REST API

## Introduction Circuit ID&reg; is an innovative cloud communications platform that redefines your connectivity experience. Our cutting-edge AI-powered solution seamlessly integrates calling, meetings, messaging, voicemail, fax, SIP Trunking, mobile broadband, and mobile phone services, accessible wherever you and your devices go.                  Whether you are a beginner getting started with our API or an experienced developer looking for advanced features, this documentation site will serve as your comprehensive guide.   We are excited to have you on board and are confident that this documentation site will empower you to leverage the full potential of our REST API.  If you have any questions or require further assistance, please don't hesitate to reach out to our support team.                  Happy coding!

The version of the OpenAPI document: 0.47.22
Contact: support@circuitid.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'date'
require 'time'

module CircuitID
  class ContactsCreateOrPatch
    attr_accessor :email

    attr_accessor :first

    attr_accessor :last

    attr_accessor :mobile_phone

    attr_accessor :business_phone

    attr_accessor :fax_phone

    attr_accessor :extension

    attr_accessor :job_title

    attr_accessor :department

    attr_accessor :avatar

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'email' => :'email',
        :'first' => :'first',
        :'last' => :'last',
        :'mobile_phone' => :'mobilePhone',
        :'business_phone' => :'businessPhone',
        :'fax_phone' => :'faxPhone',
        :'extension' => :'extension',
        :'job_title' => :'jobTitle',
        :'department' => :'department',
        :'avatar' => :'avatar'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'email' => :'String',
        :'first' => :'String',
        :'last' => :'String',
        :'mobile_phone' => :'String',
        :'business_phone' => :'String',
        :'fax_phone' => :'String',
        :'extension' => :'Integer',
        :'job_title' => :'String',
        :'department' => :'String',
        :'avatar' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `CircuitID::ContactsCreateOrPatch` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `CircuitID::ContactsCreateOrPatch`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'first')
        self.first = attributes[:'first']
      end

      if attributes.key?(:'last')
        self.last = attributes[:'last']
      end

      if attributes.key?(:'mobile_phone')
        self.mobile_phone = attributes[:'mobile_phone']
      end

      if attributes.key?(:'business_phone')
        self.business_phone = attributes[:'business_phone']
      end

      if attributes.key?(:'fax_phone')
        self.fax_phone = attributes[:'fax_phone']
      end

      if attributes.key?(:'extension')
        self.extension = attributes[:'extension']
      end

      if attributes.key?(:'job_title')
        self.job_title = attributes[:'job_title']
      end

      if attributes.key?(:'department')
        self.department = attributes[:'department']
      end

      if attributes.key?(:'avatar')
        self.avatar = attributes[:'avatar']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@email.nil? && @email.to_s.length > 45
        invalid_properties.push('invalid value for "email", the character length must be smaller than or equal to 45.')
      end

      if @first.nil?
        invalid_properties.push('invalid value for "first", first cannot be nil.')
      end

      if @first.to_s.length > 45
        invalid_properties.push('invalid value for "first", the character length must be smaller than or equal to 45.')
      end

      if !@last.nil? && @last.to_s.length > 45
        invalid_properties.push('invalid value for "last", the character length must be smaller than or equal to 45.')
      end

      if !@mobile_phone.nil? && @mobile_phone.to_s.length > 20
        invalid_properties.push('invalid value for "mobile_phone", the character length must be smaller than or equal to 20.')
      end

      if !@business_phone.nil? && @business_phone.to_s.length > 20
        invalid_properties.push('invalid value for "business_phone", the character length must be smaller than or equal to 20.')
      end

      if !@fax_phone.nil? && @fax_phone.to_s.length > 20
        invalid_properties.push('invalid value for "fax_phone", the character length must be smaller than or equal to 20.')
      end

      if !@job_title.nil? && @job_title.to_s.length > 45
        invalid_properties.push('invalid value for "job_title", the character length must be smaller than or equal to 45.')
      end

      if !@department.nil? && @department.to_s.length > 45
        invalid_properties.push('invalid value for "department", the character length must be smaller than or equal to 45.')
      end

      if !@avatar.nil? && @avatar.to_s.length > 512
        invalid_properties.push('invalid value for "avatar", the character length must be smaller than or equal to 512.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@email.nil? && @email.to_s.length > 45
      return false if @first.nil?
      return false if @first.to_s.length > 45
      return false if !@last.nil? && @last.to_s.length > 45
      return false if !@mobile_phone.nil? && @mobile_phone.to_s.length > 20
      return false if !@business_phone.nil? && @business_phone.to_s.length > 20
      return false if !@fax_phone.nil? && @fax_phone.to_s.length > 20
      return false if !@job_title.nil? && @job_title.to_s.length > 45
      return false if !@department.nil? && @department.to_s.length > 45
      return false if !@avatar.nil? && @avatar.to_s.length > 512
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] email Value to be assigned
    def email=(email)
      if !email.nil? && email.to_s.length > 45
        fail ArgumentError, 'invalid value for "email", the character length must be smaller than or equal to 45.'
      end

      @email = email
    end

    # Custom attribute writer method with validation
    # @param [Object] first Value to be assigned
    def first=(first)
      if first.nil?
        fail ArgumentError, 'first cannot be nil'
      end

      if first.to_s.length > 45
        fail ArgumentError, 'invalid value for "first", the character length must be smaller than or equal to 45.'
      end

      @first = first
    end

    # Custom attribute writer method with validation
    # @param [Object] last Value to be assigned
    def last=(last)
      if !last.nil? && last.to_s.length > 45
        fail ArgumentError, 'invalid value for "last", the character length must be smaller than or equal to 45.'
      end

      @last = last
    end

    # Custom attribute writer method with validation
    # @param [Object] mobile_phone Value to be assigned
    def mobile_phone=(mobile_phone)
      if !mobile_phone.nil? && mobile_phone.to_s.length > 20
        fail ArgumentError, 'invalid value for "mobile_phone", the character length must be smaller than or equal to 20.'
      end

      @mobile_phone = mobile_phone
    end

    # Custom attribute writer method with validation
    # @param [Object] business_phone Value to be assigned
    def business_phone=(business_phone)
      if !business_phone.nil? && business_phone.to_s.length > 20
        fail ArgumentError, 'invalid value for "business_phone", the character length must be smaller than or equal to 20.'
      end

      @business_phone = business_phone
    end

    # Custom attribute writer method with validation
    # @param [Object] fax_phone Value to be assigned
    def fax_phone=(fax_phone)
      if !fax_phone.nil? && fax_phone.to_s.length > 20
        fail ArgumentError, 'invalid value for "fax_phone", the character length must be smaller than or equal to 20.'
      end

      @fax_phone = fax_phone
    end

    # Custom attribute writer method with validation
    # @param [Object] job_title Value to be assigned
    def job_title=(job_title)
      if !job_title.nil? && job_title.to_s.length > 45
        fail ArgumentError, 'invalid value for "job_title", the character length must be smaller than or equal to 45.'
      end

      @job_title = job_title
    end

    # Custom attribute writer method with validation
    # @param [Object] department Value to be assigned
    def department=(department)
      if !department.nil? && department.to_s.length > 45
        fail ArgumentError, 'invalid value for "department", the character length must be smaller than or equal to 45.'
      end

      @department = department
    end

    # Custom attribute writer method with validation
    # @param [Object] avatar Value to be assigned
    def avatar=(avatar)
      if !avatar.nil? && avatar.to_s.length > 512
        fail ArgumentError, 'invalid value for "avatar", the character length must be smaller than or equal to 512.'
      end

      @avatar = avatar
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          email == o.email &&
          first == o.first &&
          last == o.last &&
          mobile_phone == o.mobile_phone &&
          business_phone == o.business_phone &&
          fax_phone == o.fax_phone &&
          extension == o.extension &&
          job_title == o.job_title &&
          department == o.department &&
          avatar == o.avatar
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [email, first, last, mobile_phone, business_phone, fax_phone, extension, job_title, department, avatar].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = CircuitID.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
