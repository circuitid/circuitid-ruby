=begin
#Circuit ID REST API

## Introduction Circuit ID&reg; is an innovative cloud communications platform that redefines your connectivity experience. Our cutting-edge AI-powered solution seamlessly integrates calling, meetings, messaging, voicemail, fax, SIP Trunking, mobile broadband, and mobile phone services, accessible wherever you and your devices go.                  Whether you are a beginner getting started with our API or an experienced developer looking for advanced features, this documentation site will serve as your comprehensive guide.   We are excited to have you on board and are confident that this documentation site will empower you to leverage the full potential of our REST API.  If you have any questions or require further assistance, please don't hesitate to reach out to our support team.                  Happy coding!

The version of the OpenAPI document: 0.47.8
Contact: support@circuitid.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'date'
require 'time'

module CircuitID
  class Callqueues
    attr_accessor :name

    attr_accessor :strategy

    attr_accessor :announce_position

    attr_accessor :moh

    attr_accessor :caller_resume_timeout

    attr_accessor :max_wait_time

    attr_accessor :max_wait_time_no_agent

    attr_accessor :max_no_answer

    attr_accessor :no_answer_delay_timeout

    attr_accessor :reject_timeout

    attr_accessor :busy_timeout

    attr_accessor :wrap_up_timeout

    attr_accessor :time_based_score

    attr_accessor :tier_rules_apply

    attr_accessor :tier_rule_no_agent_no_wait

    attr_accessor :tier_rule_wait_second

    attr_accessor :tier_rule_wait_multiply_level

    attr_accessor :abandoned_resume_allowed

    attr_accessor :discard_abandoned_after

    attr_accessor :max_wait_time_no_agent_time_reached

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'name' => :'name',
        :'strategy' => :'strategy',
        :'announce_position' => :'announcePosition',
        :'moh' => :'moh',
        :'caller_resume_timeout' => :'callerResumeTimeout',
        :'max_wait_time' => :'maxWaitTime',
        :'max_wait_time_no_agent' => :'maxWaitTimeNoAgent',
        :'max_no_answer' => :'maxNoAnswer',
        :'no_answer_delay_timeout' => :'noAnswerDelayTimeout',
        :'reject_timeout' => :'rejectTimeout',
        :'busy_timeout' => :'busyTimeout',
        :'wrap_up_timeout' => :'wrapUpTimeout',
        :'time_based_score' => :'timeBasedScore',
        :'tier_rules_apply' => :'tierRulesApply',
        :'tier_rule_no_agent_no_wait' => :'tierRuleNoAgentNoWait',
        :'tier_rule_wait_second' => :'tierRuleWaitSecond',
        :'tier_rule_wait_multiply_level' => :'tierRuleWaitMultiplyLevel',
        :'abandoned_resume_allowed' => :'abandonedResumeAllowed',
        :'discard_abandoned_after' => :'discardAbandonedAfter',
        :'max_wait_time_no_agent_time_reached' => :'maxWaitTimeNoAgentTimeReached'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'name' => :'Object',
        :'strategy' => :'Object',
        :'announce_position' => :'Object',
        :'moh' => :'Object',
        :'caller_resume_timeout' => :'Object',
        :'max_wait_time' => :'Object',
        :'max_wait_time_no_agent' => :'Object',
        :'max_no_answer' => :'Object',
        :'no_answer_delay_timeout' => :'Object',
        :'reject_timeout' => :'Object',
        :'busy_timeout' => :'Object',
        :'wrap_up_timeout' => :'Object',
        :'time_based_score' => :'Object',
        :'tier_rules_apply' => :'Object',
        :'tier_rule_no_agent_no_wait' => :'Object',
        :'tier_rule_wait_second' => :'Object',
        :'tier_rule_wait_multiply_level' => :'Object',
        :'abandoned_resume_allowed' => :'Object',
        :'discard_abandoned_after' => :'Object',
        :'max_wait_time_no_agent_time_reached' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'name',
        :'strategy',
        :'announce_position',
        :'moh',
        :'caller_resume_timeout',
        :'max_wait_time',
        :'max_wait_time_no_agent',
        :'max_no_answer',
        :'no_answer_delay_timeout',
        :'reject_timeout',
        :'busy_timeout',
        :'wrap_up_timeout',
        :'time_based_score',
        :'tier_rules_apply',
        :'tier_rule_no_agent_no_wait',
        :'tier_rule_wait_second',
        :'tier_rule_wait_multiply_level',
        :'abandoned_resume_allowed',
        :'discard_abandoned_after',
        :'max_wait_time_no_agent_time_reached'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `CircuitID::Callqueues` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `CircuitID::Callqueues`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'strategy')
        self.strategy = attributes[:'strategy']
      end

      if attributes.key?(:'announce_position')
        self.announce_position = attributes[:'announce_position']
      end

      if attributes.key?(:'moh')
        self.moh = attributes[:'moh']
      end

      if attributes.key?(:'caller_resume_timeout')
        self.caller_resume_timeout = attributes[:'caller_resume_timeout']
      end

      if attributes.key?(:'max_wait_time')
        self.max_wait_time = attributes[:'max_wait_time']
      end

      if attributes.key?(:'max_wait_time_no_agent')
        self.max_wait_time_no_agent = attributes[:'max_wait_time_no_agent']
      end

      if attributes.key?(:'max_no_answer')
        self.max_no_answer = attributes[:'max_no_answer']
      end

      if attributes.key?(:'no_answer_delay_timeout')
        self.no_answer_delay_timeout = attributes[:'no_answer_delay_timeout']
      end

      if attributes.key?(:'reject_timeout')
        self.reject_timeout = attributes[:'reject_timeout']
      end

      if attributes.key?(:'busy_timeout')
        self.busy_timeout = attributes[:'busy_timeout']
      end

      if attributes.key?(:'wrap_up_timeout')
        self.wrap_up_timeout = attributes[:'wrap_up_timeout']
      end

      if attributes.key?(:'time_based_score')
        self.time_based_score = attributes[:'time_based_score']
      end

      if attributes.key?(:'tier_rules_apply')
        self.tier_rules_apply = attributes[:'tier_rules_apply']
      end

      if attributes.key?(:'tier_rule_no_agent_no_wait')
        self.tier_rule_no_agent_no_wait = attributes[:'tier_rule_no_agent_no_wait']
      end

      if attributes.key?(:'tier_rule_wait_second')
        self.tier_rule_wait_second = attributes[:'tier_rule_wait_second']
      end

      if attributes.key?(:'tier_rule_wait_multiply_level')
        self.tier_rule_wait_multiply_level = attributes[:'tier_rule_wait_multiply_level']
      end

      if attributes.key?(:'abandoned_resume_allowed')
        self.abandoned_resume_allowed = attributes[:'abandoned_resume_allowed']
      end

      if attributes.key?(:'discard_abandoned_after')
        self.discard_abandoned_after = attributes[:'discard_abandoned_after']
      end

      if attributes.key?(:'max_wait_time_no_agent_time_reached')
        self.max_wait_time_no_agent_time_reached = attributes[:'max_wait_time_no_agent_time_reached']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @name.to_s.length > 45
        invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 45.')
      end

      if @moh.to_s.length > 255
        invalid_properties.push('invalid value for "moh", the character length must be smaller than or equal to 255.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @name.to_s.length > 45
      strategy_validator = EnumAttributeValidator.new('Object', ["ring-all", "longest-idle-agent", "round-robin", "top-down", "agent-with-least-talk-time", "agent-with-fewest-calls", "sequentially-by-agent-order", "random"])
      return false unless strategy_validator.valid?(@strategy)
      return false if @moh.to_s.length > 255
      time_based_score_validator = EnumAttributeValidator.new('Object', ["queue", "system"])
      return false unless time_based_score_validator.valid?(@time_based_score)
      tier_rules_apply_validator = EnumAttributeValidator.new('Object', ["true", "false"])
      return false unless tier_rules_apply_validator.valid?(@tier_rules_apply)
      tier_rule_no_agent_no_wait_validator = EnumAttributeValidator.new('Object', ["true", "false"])
      return false unless tier_rule_no_agent_no_wait_validator.valid?(@tier_rule_no_agent_no_wait)
      tier_rule_wait_multiply_level_validator = EnumAttributeValidator.new('Object', ["true", "false"])
      return false unless tier_rule_wait_multiply_level_validator.valid?(@tier_rule_wait_multiply_level)
      abandoned_resume_allowed_validator = EnumAttributeValidator.new('Object', ["true", "false"])
      return false unless abandoned_resume_allowed_validator.valid?(@abandoned_resume_allowed)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.to_s.length > 45
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 45.'
      end

      @name = name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] strategy Object to be assigned
    def strategy=(strategy)
      validator = EnumAttributeValidator.new('Object', ["ring-all", "longest-idle-agent", "round-robin", "top-down", "agent-with-least-talk-time", "agent-with-fewest-calls", "sequentially-by-agent-order", "random"])
      unless validator.valid?(strategy)
        fail ArgumentError, "invalid value for \"strategy\", must be one of #{validator.allowable_values}."
      end
      @strategy = strategy
    end

    # Custom attribute writer method with validation
    # @param [Object] moh Value to be assigned
    def moh=(moh)
      if moh.to_s.length > 255
        fail ArgumentError, 'invalid value for "moh", the character length must be smaller than or equal to 255.'
      end

      @moh = moh
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] time_based_score Object to be assigned
    def time_based_score=(time_based_score)
      validator = EnumAttributeValidator.new('Object', ["queue", "system"])
      unless validator.valid?(time_based_score)
        fail ArgumentError, "invalid value for \"time_based_score\", must be one of #{validator.allowable_values}."
      end
      @time_based_score = time_based_score
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tier_rules_apply Object to be assigned
    def tier_rules_apply=(tier_rules_apply)
      validator = EnumAttributeValidator.new('Object', ["true", "false"])
      unless validator.valid?(tier_rules_apply)
        fail ArgumentError, "invalid value for \"tier_rules_apply\", must be one of #{validator.allowable_values}."
      end
      @tier_rules_apply = tier_rules_apply
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tier_rule_no_agent_no_wait Object to be assigned
    def tier_rule_no_agent_no_wait=(tier_rule_no_agent_no_wait)
      validator = EnumAttributeValidator.new('Object', ["true", "false"])
      unless validator.valid?(tier_rule_no_agent_no_wait)
        fail ArgumentError, "invalid value for \"tier_rule_no_agent_no_wait\", must be one of #{validator.allowable_values}."
      end
      @tier_rule_no_agent_no_wait = tier_rule_no_agent_no_wait
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tier_rule_wait_multiply_level Object to be assigned
    def tier_rule_wait_multiply_level=(tier_rule_wait_multiply_level)
      validator = EnumAttributeValidator.new('Object', ["true", "false"])
      unless validator.valid?(tier_rule_wait_multiply_level)
        fail ArgumentError, "invalid value for \"tier_rule_wait_multiply_level\", must be one of #{validator.allowable_values}."
      end
      @tier_rule_wait_multiply_level = tier_rule_wait_multiply_level
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] abandoned_resume_allowed Object to be assigned
    def abandoned_resume_allowed=(abandoned_resume_allowed)
      validator = EnumAttributeValidator.new('Object', ["true", "false"])
      unless validator.valid?(abandoned_resume_allowed)
        fail ArgumentError, "invalid value for \"abandoned_resume_allowed\", must be one of #{validator.allowable_values}."
      end
      @abandoned_resume_allowed = abandoned_resume_allowed
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          name == o.name &&
          strategy == o.strategy &&
          announce_position == o.announce_position &&
          moh == o.moh &&
          caller_resume_timeout == o.caller_resume_timeout &&
          max_wait_time == o.max_wait_time &&
          max_wait_time_no_agent == o.max_wait_time_no_agent &&
          max_no_answer == o.max_no_answer &&
          no_answer_delay_timeout == o.no_answer_delay_timeout &&
          reject_timeout == o.reject_timeout &&
          busy_timeout == o.busy_timeout &&
          wrap_up_timeout == o.wrap_up_timeout &&
          time_based_score == o.time_based_score &&
          tier_rules_apply == o.tier_rules_apply &&
          tier_rule_no_agent_no_wait == o.tier_rule_no_agent_no_wait &&
          tier_rule_wait_second == o.tier_rule_wait_second &&
          tier_rule_wait_multiply_level == o.tier_rule_wait_multiply_level &&
          abandoned_resume_allowed == o.abandoned_resume_allowed &&
          discard_abandoned_after == o.discard_abandoned_after &&
          max_wait_time_no_agent_time_reached == o.max_wait_time_no_agent_time_reached
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [name, strategy, announce_position, moh, caller_resume_timeout, max_wait_time, max_wait_time_no_agent, max_no_answer, no_answer_delay_timeout, reject_timeout, busy_timeout, wrap_up_timeout, time_based_score, tier_rules_apply, tier_rule_no_agent_no_wait, tier_rule_wait_second, tier_rule_wait_multiply_level, abandoned_resume_allowed, discard_abandoned_after, max_wait_time_no_agent_time_reached].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = CircuitID.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
